/********let*******/
let的作用:声明变量,但是作用域只在当前块内,因此,let适合用于for循环中
例如:
var a = [];
for (var i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
a[6](); // 10
注意,使用var会产生许多误解,原因是var 声明的是全局变量 在函数加载完毕后,i指向10

let的特性:
1.不能在同一个块中let两个相同的变量,会产生语法错误
  如果非要这样,应该为每个let包上一层块.
  同时,如果一个变量被let过,这个变量就不能被var或者其它方法
2.未经初始化,不能对let进行操作
3.let不能进行变量提升,即变量可以在声明之前使用,而var可以;
4.使用let命令声明变量之前，该变量都是不可用的.-----暂时性死区

/*******const*******/
const的作用:声明一个只读的常量。一旦声明，常量的值就不能改变。
const特性:
1.和let一样,同样只适用于块内
2.必须进行初始化
3.不能在同一个块中let两个相同的变量,会产生语法错误
  如果非要这样,应该为每个let包上一层块.
  同时,如果一个变量被let过,这个变量就不能被var或者其它方法
4.const不能进行变量提升,即变量可以在声明之前使用,而var可以;
5.使用const命令声明变量之前，该变量都是不可用的.-----暂时性死区

/*******解构赋值语法(destructuring assignment syntax)*******/
在声明变量时,通过在等号两边采用相似的格式,为变量赋值的方法;

数组解构:
var a, b, rest;
[a, b] = [10, 20];
console.log(a); // 10
console.log(b); // 20

[a, b, ...rest] = [10, 20, 30, 40, 50];       ...意味着数组中剩下的内容
console.log(a); // 10
console.log(b); // 20
console.log(rest); // [30, 40, 50]

a,b交换可以写成:
[a,b]=[b,a]

对象解构:
var a, b;
({a, b} = {a: 1, b: 2});
注意:这里必须加括号,因为{a,b}={a:1,b:2}不符合语法,等是左边的并不是一个对象
或者可以写成var {a,b}={a:1,b:2};

/*******unicode*******/
JavaScript允许采用\uxxxx表示一个字符
ES6采用\u{xxxxx}允许表示大于一个字符的文字

/*******字符串*******/
1.includes(),startWith(),endWith()
includes()判断是否存在子字符串,以及出现的位置
startWith()判断字符串是由哪一个子字符串开始的,以及它的第一个字符位置
endsWith()判断字符串是由哪一个子字符串结束的,以及字符串的长度

2.repeat()
表示将一个字符串进行重复
'x'.repeat(3) // "xxx"




