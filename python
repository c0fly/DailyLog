/**********module**********/
在给文件命名时,不要将名字设置成和模块名相同,会造成错误.(比如:turtle.py)

模块import:

from . import XXX :表示退回到上一级目录,导入xxx
from .A import XXX:表示进入上一级的A目录下面,调用A里面的xxx

/*******os*******/
获取文档列表名称:os.listdir(Path)
获取当前工作目录:os.getcwd()
更改当前工作目录:os.chdir() /*在对文件进行操作时,需要注意工作目录*/

/*******turtle*******/
改变形状:turtle.shape()
改变颜色:turtle.color(画笔颜色,轨迹颜色)
改变速度:turtle.speed()

/***turtle的类***/
1.Screen():用来控制屏幕
2.Turle():用来控制画笔
	circle(radius,angle,steps)




/**********other usage**********/
/*******range*******/
常用于循环,range(开始,结束,步长)

/*******open*******/
地址位于内置函数(build-in-function)中,用来打开文件

/*******字符*******/
1.str()将其他类型的数字转成字符
2.大小写:lower(),upper()

/*******运算*******/
1.除法运算的时候,注意浮点数的选择(3/2=1)

/*******数组(list)*******/
1.插入:arr.insert()
2.删除:del arr[0]/arr.remove(内容)
3.弹出最后一个数:arr.pop()
4.加入最后一个数:arr.append()
5.求数组长度:len(arr)
6.数组倒序a:arr.reverse() 
7.显示特定元素:arr[n:m],不包含m  arr[-2:]最后两个元素
8.元组:arr=(),元组内的元素不能被更改,但是可以重新定义整个元组

/*******排序*******/
1.永久性排序:sort(),从大到小顺序:sort(reverse=True)

/*******判断*******/
1.与运算是 and
	或运算是 or
	非运算是 not

2.元素是否在数组中?
... in ...
... not in ...

3.else if 在python里面是elif	

/*******字典(对象)*******/
1.最好先命名一个空字典,再对它进行操作
创建字典:dict()  dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])


2.删除字典中的元素: del dic["..."]
3.dic.items()返回键-值表,可以用for key,value in dic.items()遍历
4.dic.keys() 返回键
5.dic.values()返回值

/*******用户输入*******/
1.raw_input():

/*******函数*******/
/***参数传递***/
1.*的作用:在函数不知道传递多少实参的时候用
一般这种参数放在最后
例如:
def func(*toppings):
	for topping in toppings:
		print(topping)

func("a","b","c")
func("d","e")		

2.**的作用:在不知道函数传递什么实参的时候用
一般用来表示字典
例如:
def func(**toppings):
  dic={}
  for key,value in toppings:
  	dic[key]=value
  return dic

user=func((name="Tom",age=24))
print(user)

/***导入函数***/
1.从模块中导入函数:
from module_name import func_name
2.简化模块函数:
form module_name import func_name as simple_name
3.简化模块:
import module_name as mn
4.导入模块中的所有函数:
from module import *

/*******类*******/
1.问题:如何判断某个变量是某一种类型?
解决方案:isinstance()
a = list() # a是list类型
b = Animal() # b是Animal类型
c = Dog() # c是Dog类型
isinstance(a, list)

2.问题:如何保持和父类一样的方法?
解决方案:super().__init__()
super()是一个特殊函数,帮助父类和子类联系起来

/*******字符编码*******/
1.问题:源代码中有中文报错,怎么办?
解决方案: 在第一行加上 # _*_coding:UTF _*_





/*******web开发*******/
WSGI Web Server Gateway Interface 是一个http相关的底层代码的接口

